#!/home/vlt-os/env/bin/python
"""This file is part of Vulture OS.

Vulture OS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Vulture OS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Vulture OS.  If not, see http://www.gnu.org/licenses/.
"""

__author__ = "Jérémie JOURDIN"
__credits__ = []
__license__ = "GPLv3"
__version__ = "4.0.0"
__maintainer__ = "Vulture OS"
__email__ = "contact@vultureproject.org"
__doc__ = 'DarwinPolicy dedicated form class'

# Django system imports
from django.conf import settings
from django.forms import (CharField, CheckboxInput, ModelChoiceField, ModelForm, NumberInput, Select, SelectMultiple,
                          TextInput, FilePathField, DecimalField, Textarea)

# Django project imports
from darwin.defender_policy.models import DefenderPolicy
from darwin.log_viewer.models import DefenderRuleset

# Extern modules imports

# Required exceptions imports

# Logger configuration imports
import logging
logging.config.dictConfig(settings.LOG_SETTINGS)
logger = logging.getLogger('gui')


class DefenderPolicyForm(ModelForm):

    class Meta:
        model = DefenderPolicy
        fields = ('name', 'defender_ruleset', 'request_body_limit', 'enable_libinjection_sql',
                  'enable_libinjection_xss')
        widgets = {
            'name': TextInput(attrs={'class': 'form-control'}),
            'defender_ruleset': Select(attrs={'class': 'form-control'},
                                       choices=DefenderRuleset.objects.all().only(*DefenderRuleset.str_attrs())),
            'request_body_limit': NumberInput(attrs={'class': 'form-control'}),
            'enable_libinjection_sql': CheckboxInput(),
            'enable_libinjection_xss': CheckboxInput(),
        }
        labels = {
            'defender_ruleset': 'WAF Ruleset',
            'request_body_limit': 'Request body limit (KB)',
            'enable_libinjection_sql': 'Enable libinjection (SQL)',
            'enable_libinjection_xss': 'Enable libinjection (XSS)',
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Remove the blank input generated by django
        for field_name in ['defender_ruleset']:
            self.fields[field_name].empty_label = None
        # Set all fields as non required
        for field in self.fields:
            self.fields[field].required = False

    def clean_name(self):
        """ Replace all spaces by underscores to prevent bugs later """
        return self.cleaned_data['name'].replace(' ', '_')


class DefenderRulesetForm(ModelForm):
    class Meta:
        model = DefenderRuleset
        fields = ('name', 'raw_rules')
        widgets = {
            'name': TextInput(attrs={'class': 'form-control'}),
            'raw_rules': Textarea(attrs={'class': 'form-control'})
        }
        labels = {
            "raw_rules": 'Rules',
        }

    def clean_name(self):
        """ Replace all spaces by underscores to prevent bugs later """
        return self.cleaned_data['name'].replace(' ', '_')
