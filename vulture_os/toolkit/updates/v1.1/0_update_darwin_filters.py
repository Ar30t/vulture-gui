#!/home/vlt-os/env/bin/python

"""This file is part of Vulture 4.

Vulture 4 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Vulture 4 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Vulture 4.  If not, see http://www.gnu.org/licenses/.
"""
__author__ = "Th√©o Bertin"
__credits__ = []
__license__ = "GPLv3"
__version__ = "4.0.0"
__maintainer__ = "Vulture Project"
__email__ = "contact@vultureproject.org"
__doc__ = 'Update DarwinFilter objects to reflect new names and fields'

import sys
import os

if not os.path.exists("/home/vlt-os/vulture_os/.node_ok"):
    sys.exit(0)

# Django setup part
sys.path.append('/home/vlt-os/vulture_os')
os.environ.setdefault("DJANGO_SETTINGS_MODULE", 'vulture_os.settings')

import django
from django.conf import settings
django.setup()

from system.cluster.models import Cluster, Node
from darwin.policy.models import DarwinFilter

if __name__ == "__main__":

    node = Cluster.get_current_node()
    if not node:
        print("Current node not found. Maybe the cluster has not been initiated yet.")
    else:
        for dfilter in DarwinFilter.objects.all():
            try:
                # Update existing filters
                if dfilter.name == "session":
                    dfilter.name = "sess"
                    dfilter.longname = "Session"
                    dfilter.description = "Checks if a user is connected or not, by storing and querying Redis with session cookies"
                    dfilter.is_internal = True
                    dfilter.can_be_buffered = False
                    dfilter.save()
                elif dfilter.name == "dga":
                    dfilter.name = "dgad"
                    dfilter.longname = "Domain Generated by Algorithm Detection"
                    dfilter.description = "Detects the Domain Generation Algorithms (DGAs)"
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = False
                    dfilter.save()
                elif dfilter.name == "anomaly":
                    dfilter.name = "unad"
                    dfilter.longname = "UNsupervised Anomaly Detection"
                    dfilter.description = "Detects abnormal connection behaviours (outliers) in network traffic"
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = True
                    dfilter.save()
                elif dfilter.name == "connection":
                    dfilter.name = "conn"
                    dfilter.longname = "Connection"
                    dfilter.description = "Detects new connections between assets"
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = False
                    dfilter.save()
                elif dfilter.name == "hostlookup":
                    dfilter.name = "lkup"
                    dfilter.longname = "Lookup"
                    dfilter.description = "Searches for matches in lookup files, it can be used to search for specific IPs, FQDNs, domains, URLs..."
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = False
                    dfilter.save()
                elif dfilter.name == "sofa":
                    dfilter.name = "sofa"
                    dfilter.longname = "Scan Outlier Finder and Analysis"
                    dfilter.description = "Allows finding outliers in scan results coming from network scanners"
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = True
                    dfilter.save()
                elif dfilter.name == "content_inspection":
                    dfilter.longname = "deprecated in next version, please use yara instead"
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = False
                    dfilter.save()
                elif dfilter.name == "tanomaly":
                    dfilter.longname = "deprecated in next version, please use unad with continuous analysis instead"
                    dfilter.is_internal = False
                    dfilter.can_be_buffered = False
                    dfilter.save()
            except Exception as e:
                print("could not update DarwinFilter '{}': {}".format(dfilter, e))

        print("Done.")
